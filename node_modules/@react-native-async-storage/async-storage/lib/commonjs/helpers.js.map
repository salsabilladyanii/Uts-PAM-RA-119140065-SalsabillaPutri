{"version":3,"sources":["helpers.ts"],"names":["checkValidArgs","keyValuePairs","callback","Array","isArray","length","Error","checkValidInput","input","key","value","console","warn","convertError","error","out","message","convertErrors","errs","errors","ensureArray","map","e"],"mappings":";;;;;;;;;;AAEO,SAASA,cAAT,CAAwBC,aAAxB,EAAkDC,QAAlD,EAAqE;AAC1E,MACE,CAACC,KAAK,CAACC,OAAN,CAAcH,aAAd,CAAD,IACAA,aAAa,CAACI,MAAd,KAAyB,CADzB,IAEA,CAACF,KAAK,CAACC,OAAN,CAAcH,aAAa,CAAC,CAAD,CAA3B,CAHH,EAIE;AACA,UAAM,IAAIK,KAAJ,CACJ,gFADI,CAAN;AAGD;;AAED,MAAIJ,QAAQ,IAAI,OAAOA,QAAP,KAAoB,UAApC,EAAgD;AAC9C,QAAIC,KAAK,CAACC,OAAN,CAAcF,QAAd,CAAJ,EAA6B;AAC3B,YAAM,IAAII,KAAJ,CACJ,6IADI,CAAN;AAGD;;AAED,UAAM,IAAIA,KAAJ,CACJ,iEADI,CAAN;AAGD;AACF;;AAEM,SAASC,eAAT,GAA8C;AAAA,oCAAlBC,KAAkB;AAAlBA,IAAAA,KAAkB;AAAA;;AACnD,QAAM,CAACC,GAAD,EAAMC,KAAN,IAAeF,KAArB;;AAEA,MAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AAC3BE,IAAAA,OAAO,CAACC,IAAR,CACG,wBAAuB,OAAOH,GAAI,iHAAgHA,GAAI,IADzJ;AAGD;;AAED,MAAID,KAAK,CAACH,MAAN,GAAe,CAAf,IAAoB,OAAOK,KAAP,KAAiB,QAAzC,EAAmD;AACjD,QAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,YAAM,IAAIJ,KAAJ,CACH,gJAA+II,KAAM,iBAAgBD,GAAI,IADtK,CAAN;AAGD,KAJD,MAIO;AACLE,MAAAA,OAAO,CAACC,IAAR,CACG,qCAAoCH,GAAI,4GAA2GC,KAAM,iBAAgBD,GAAI,IADhL;AAGD;AACF;AACF;;AAEM,SAASI,YAAT,CAAsBC,KAAtB,EAAuD;AAC5D,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,IAAP;AACD;;AAED,QAAMC,GAAG,GAAG,IAAIT,KAAJ,CAAUQ,KAAK,CAACE,OAAhB,CAAZ;AACCD,EAAAA,GAAD,CAAaN,GAAb,GAAmBK,KAAK,CAACL,GAAzB;AACA,SAAOM,GAAP;AACD;;AAEM,SAASE,aAAT,CACLC,IADK,EAE+B;AACpC,QAAMC,MAAM,GAAGC,WAAW,CAACF,IAAD,CAA1B;AACA,SAAOC,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAYC,CAAD,IAAOT,YAAY,CAACS,CAAD,CAA9B,CAAH,GAAwC,IAArD;AACD;;AAED,SAASF,WAAT,CAAqBE,CAArB,EAAsE;AACpE,MAAInB,KAAK,CAACC,OAAN,CAAckB,CAAd,CAAJ,EAAsB;AACpB,WAAOA,CAAC,CAACjB,MAAF,KAAa,CAAb,GAAiB,IAAjB,GAAwBiB,CAA/B;AACD,GAFD,MAEO,IAAIA,CAAJ,EAAO;AACZ,WAAO,CAACA,CAAD,CAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAP;AACD;AACF","sourcesContent":["import type { ErrorLike } from './types';\r\n\r\nexport function checkValidArgs(keyValuePairs: unknown[], callback: unknown) {\r\n  if (\r\n    !Array.isArray(keyValuePairs) ||\r\n    keyValuePairs.length === 0 ||\r\n    !Array.isArray(keyValuePairs[0])\r\n  ) {\r\n    throw new Error(\r\n      '[AsyncStorage] Expected array of key-value pairs as first argument to multiSet'\r\n    );\r\n  }\r\n\r\n  if (callback && typeof callback !== 'function') {\r\n    if (Array.isArray(callback)) {\r\n      throw new Error(\r\n        '[AsyncStorage] Expected function as second argument to multiSet. Did you forget to wrap key-value pairs in an array for the first argument?'\r\n      );\r\n    }\r\n\r\n    throw new Error(\r\n      '[AsyncStorage] Expected function as second argument to multiSet'\r\n    );\r\n  }\r\n}\r\n\r\nexport function checkValidInput(...input: unknown[]) {\r\n  const [key, value] = input;\r\n\r\n  if (typeof key !== 'string') {\r\n    console.warn(\r\n      `[AsyncStorage] Using ${typeof key} type for key is not supported. This can lead to unexpected behavior/errors. Use string instead.\\nKey passed: ${key}\\n`\r\n    );\r\n  }\r\n\r\n  if (input.length > 1 && typeof value !== 'string') {\r\n    if (value == null) {\r\n      throw new Error(\r\n        `[AsyncStorage] Passing null/undefined as value is not supported. If you want to remove value, Use .removeItem method instead.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\r\n      );\r\n    } else {\r\n      console.warn(\r\n        `[AsyncStorage] The value for key \"${key}\" is not a string. This can lead to unexpected behavior/errors. Consider stringifying it.\\nPassed value: ${value}\\nPassed key: ${key}\\n`\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport function convertError(error?: ErrorLike): Error | null {\r\n  if (!error) {\r\n    return null;\r\n  }\r\n\r\n  const out = new Error(error.message);\r\n  (out as any).key = error.key;\r\n  return out;\r\n}\r\n\r\nexport function convertErrors(\r\n  errs?: ErrorLike[]\r\n): ReadonlyArray<Error | null> | null {\r\n  const errors = ensureArray(errs);\r\n  return errors ? errors.map((e) => convertError(e)) : null;\r\n}\r\n\r\nfunction ensureArray(e?: ErrorLike | ErrorLike[]): ErrorLike[] | null {\r\n  if (Array.isArray(e)) {\r\n    return e.length === 0 ? null : e;\r\n  } else if (e) {\r\n    return [e];\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n"]}