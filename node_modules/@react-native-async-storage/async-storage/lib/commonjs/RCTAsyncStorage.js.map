{"version":3,"sources":["RCTAsyncStorage.ts"],"names":["RCTAsyncStorage","NativeModules","TurboModuleRegistry","get"],"mappings":";;;;;;;AACA;;AACA;;AAFA;AAIA,IAAIA,eAAe,GACjBC,2BAAc,sBAAd,KAAyC;AACzCA,2BAAc,0BAAd,CADA,IAEAA,2BAAc,iBAAd,CAHF;;AAKA,IAAI,CAACD,eAAD,IAAoB,6EAAxB,EAA8D;AAC5D;AACA;AACA;AACA,MAAIE,gCAAJ,EAAyB;AACvBF,IAAAA,eAAe,GACbE,iCAAoBC,GAApB,CAAwB,sBAAxB,KACAD,iCAAoBC,GAApB,CAAwB,mBAAxB,CAFF;AAGD,GAJD,MAIO;AACLH,IAAAA,eAAe,GACbC,2BAAc,sBAAd,KACAA,2BAAc,mBAAd,CAFF;AAGD;AACF;;eAEcD,e","sourcesContent":["// @ts-ignore Module '\"react-native\"' has no exported member 'TurboModuleRegistry'.\r\nimport { NativeModules, TurboModuleRegistry } from 'react-native';\r\nimport { shouldFallbackToLegacyNativeModule } from './shouldFallbackToLegacyNativeModule';\r\n\r\nlet RCTAsyncStorage =\r\n  NativeModules['PlatformLocalStorage'] || // Support for external modules, like react-native-windows\r\n  NativeModules['RNC_AsyncSQLiteDBStorage'] ||\r\n  NativeModules['RNCAsyncStorage'];\r\n\r\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\r\n  // TurboModuleRegistry falls back to NativeModules so we don't have to try go\r\n  // assign NativeModules' counterparts if TurboModuleRegistry would resolve\r\n  // with undefined.\r\n  if (TurboModuleRegistry) {\r\n    RCTAsyncStorage =\r\n      TurboModuleRegistry.get('AsyncSQLiteDBStorage') ||\r\n      TurboModuleRegistry.get('AsyncLocalStorage');\r\n  } else {\r\n    RCTAsyncStorage =\r\n      NativeModules['AsyncSQLiteDBStorage'] ||\r\n      NativeModules['AsyncLocalStorage'];\r\n  }\r\n}\r\n\r\nexport default RCTAsyncStorage;\r\n"]}