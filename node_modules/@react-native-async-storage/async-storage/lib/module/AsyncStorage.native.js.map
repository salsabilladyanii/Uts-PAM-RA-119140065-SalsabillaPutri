{"version":3,"sources":["AsyncStorage.native.ts"],"names":["checkValidArgs","checkValidInput","convertError","convertErrors","RCTAsyncStorage","Error","AsyncStorage","_getRequests","_getKeys","_immediate","getItem","key","callback","Promise","resolve","reject","multiGet","errors","result","value","errs","setItem","multiSet","removeItem","multiRemove","mergeItem","multiMerge","clear","error","err","getAllKeys","keys","flushGetRequests","getRequests","getKeys","map","forEach","reqLength","length","errorList","i","request","requestResult","setImmediate","getRequest","keyIndex","promiseResult","push","indexOf","keyValuePairs"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\nimport {\r\n  checkValidArgs,\r\n  checkValidInput,\r\n  convertError,\r\n  convertErrors,\r\n} from './helpers';\r\nimport RCTAsyncStorage from './RCTAsyncStorage';\r\nimport type {\r\n  AsyncStorageStatic,\r\n  ErrorLike,\r\n  KeyValuePair,\r\n  MultiRequest,\r\n} from './types';\r\n\r\nif (!RCTAsyncStorage) {\r\n  throw new Error(`[@RNC/AsyncStorage]: NativeModule: AsyncStorage is null.\r\n\r\nTo fix this issue try these steps:\r\n\r\n  • Rebuild and restart the app.\r\n\r\n  • Run the packager with \\`--reset-cache\\` flag.\r\n\r\n  • If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app.\r\n\r\n  • If this happens while testing with Jest, check out docs how to integrate AsyncStorage with it: https://react-native-async-storage.github.io/async-storage/docs/advanced/jest\r\n\r\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-async-storage/async-storage/issues\r\n`);\r\n}\r\n\r\n/**\r\n * `AsyncStorage` is a simple, unencrypted, asynchronous, persistent, key-value\r\n * storage system that is global to the app. It should be used instead of\r\n * LocalStorage.\r\n *\r\n * See https://react-native-async-storage.github.io/async-storage/docs/api\r\n */\r\nconst AsyncStorage = ((): AsyncStorageStatic => {\r\n  let _getRequests: MultiRequest[] = [];\r\n  let _getKeys: string[] = [];\r\n  let _immediate: ReturnType<typeof setImmediate> | null = null;\r\n\r\n  return {\r\n    /**\r\n     * Fetches an item for a `key` and invokes a callback upon completion.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getitem\r\n     */\r\n    getItem: (key, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        checkValidInput(key);\r\n        RCTAsyncStorage.multiGet(\r\n          [key],\r\n          (errors?: ErrorLike[], result?: string[][]) => {\r\n            // Unpack result to get value from [[key,value]]\r\n            const value = result?.[0]?.[1] ? result[0][1] : null;\r\n            const errs = convertErrors(errors);\r\n            callback?.(errs?.[0], value);\r\n            if (errs) {\r\n              reject(errs[0]);\r\n            } else {\r\n              resolve(value);\r\n            }\r\n          }\r\n        );\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Sets the value for a `key` and invokes a callback upon completion.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#setitem\r\n     */\r\n    setItem: (key, value, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        checkValidInput(key, value);\r\n        RCTAsyncStorage.multiSet([[key, value]], (errors?: ErrorLike[]) => {\r\n          const errs = convertErrors(errors);\r\n          callback?.(errs?.[0]);\r\n          if (errs) {\r\n            reject(errs[0]);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Removes an item for a `key` and invokes a callback upon completion.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#removeitem\r\n     */\r\n    removeItem: (key, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        checkValidInput(key);\r\n        RCTAsyncStorage.multiRemove([key], (errors?: ErrorLike[]) => {\r\n          const errs = convertErrors(errors);\r\n          callback?.(errs?.[0]);\r\n          if (errs) {\r\n            reject(errs[0]);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Merges an existing `key` value with an input value, assuming both values\r\n     * are stringified JSON.\r\n     *\r\n     * **NOTE:** This is not supported by all native implementations.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#mergeitem\r\n     */\r\n    mergeItem: (key, value, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        checkValidInput(key, value);\r\n        RCTAsyncStorage.multiMerge([[key, value]], (errors?: ErrorLike[]) => {\r\n          const errs = convertErrors(errors);\r\n          callback?.(errs?.[0]);\r\n          if (errs) {\r\n            reject(errs[0]);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Erases *all* `AsyncStorage` for all clients, libraries, etc. You probably\r\n     * don't want to call this; use `removeItem` or `multiRemove` to clear only\r\n     * your app's keys.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#clear\r\n     */\r\n    clear: (callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        RCTAsyncStorage.clear((error?: ErrorLike) => {\r\n          const err = convertError(error);\r\n          callback?.(err);\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Gets *all* keys known to your app; for all callers, libraries, etc.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#getallkeys\r\n     */\r\n    getAllKeys: (callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        RCTAsyncStorage.getAllKeys((error?: ErrorLike, keys?: string[]) => {\r\n          const err = convertError(error);\r\n          callback?.(err, keys);\r\n          if (keys) {\r\n            resolve(keys);\r\n          } else {\r\n            reject(err);\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * The following batched functions are useful for executing a lot of\r\n     * operations at once, allowing for native optimizations and provide the\r\n     * convenience of a single callback after all operations are complete.\r\n     *\r\n     * These functions return arrays of errors, potentially one for every key.\r\n     * For key-specific errors, the Error object will have a key property to\r\n     * indicate which key caused the error.\r\n     */\r\n\r\n    /**\r\n     * Flushes any pending requests using a single batch call to get the data.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#flushgetrequests\r\n     * */\r\n    flushGetRequests: () => {\r\n      const getRequests = _getRequests;\r\n      const getKeys = _getKeys;\r\n\r\n      _getRequests = [];\r\n      _getKeys = [];\r\n\r\n      RCTAsyncStorage.multiGet(\r\n        getKeys,\r\n        (errors?: ErrorLike[], result?: string[][]) => {\r\n          // Even though the runtime complexity of this is theoretically worse vs if we used a map,\r\n          // it's much, much faster in practice for the data sets we deal with (we avoid\r\n          // allocating result pair arrays). This was heavily benchmarked.\r\n          //\r\n          // Is there a way to avoid using the map but fix the bug in this breaking test?\r\n          // https://github.com/facebook/react-native/commit/8dd8ad76579d7feef34c014d387bf02065692264\r\n          const map: Record<string, string> = {};\r\n          result?.forEach(([key, value]) => {\r\n            map[key] = value;\r\n            return value;\r\n          });\r\n          const reqLength = getRequests.length;\r\n\r\n          /**\r\n           * As mentioned few lines above, this method could be called with the array of potential error,\r\n           * in case of anything goes wrong. The problem is, if any of the batched calls fails\r\n           * the rest of them would fail too, but the error would be consumed by just one. The rest\r\n           * would simply return `undefined` as their result, rendering false negatives.\r\n           *\r\n           * In order to avoid this situation, in case of any call failing,\r\n           * the rest of them will be rejected as well (with the same error).\r\n           */\r\n          const errorList = convertErrors(errors);\r\n          const error = errorList?.length ? errorList[0] : null;\r\n\r\n          for (let i = 0; i < reqLength; i++) {\r\n            const request = getRequests[i];\r\n            if (error) {\r\n              request.callback?.(errorList);\r\n              request.reject?.(error);\r\n              continue;\r\n            }\r\n            const requestResult = request.keys.map<KeyValuePair>((key) => [\r\n              key,\r\n              map[key],\r\n            ]);\r\n            request.callback?.(null, requestResult);\r\n            request.resolve?.(requestResult);\r\n          }\r\n        }\r\n      );\r\n    },\r\n\r\n    /**\r\n     * This allows you to batch the fetching of items given an array of `key`\r\n     * inputs. Your callback will be invoked with an array of corresponding\r\n     * key-value pairs found.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiget\r\n     */\r\n    multiGet: (keys, callback) => {\r\n      if (!_immediate) {\r\n        _immediate = setImmediate(() => {\r\n          _immediate = null;\r\n          AsyncStorage.flushGetRequests();\r\n        });\r\n      }\r\n\r\n      const getRequest: MultiRequest = {\r\n        keys: keys,\r\n        callback: callback,\r\n        // do we need this?\r\n        keyIndex: _getKeys.length,\r\n        resolve: null as any,\r\n        reject: null as any,\r\n      };\r\n\r\n      const promiseResult = new Promise<readonly KeyValuePair[]>(\r\n        (resolve, reject) => {\r\n          getRequest.resolve = resolve;\r\n          getRequest.reject = reject;\r\n        }\r\n      );\r\n\r\n      _getRequests.push(getRequest);\r\n      // avoid fetching duplicates\r\n      keys.forEach((key) => {\r\n        if (_getKeys.indexOf(key) === -1) {\r\n          _getKeys.push(key);\r\n        }\r\n      });\r\n\r\n      return promiseResult;\r\n    },\r\n\r\n    /**\r\n     * Use this as a batch operation for storing multiple key-value pairs. When\r\n     * the operation completes you'll get a single callback with any errors.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiset\r\n     */\r\n    multiSet: (keyValuePairs, callback) => {\r\n      checkValidArgs(keyValuePairs, callback);\r\n      return new Promise((resolve, reject) => {\r\n        keyValuePairs.forEach(([key, value]) => {\r\n          checkValidInput(key, value);\r\n        });\r\n\r\n        RCTAsyncStorage.multiSet(keyValuePairs, (errors?: ErrorLike[]) => {\r\n          const error = convertErrors(errors);\r\n          callback?.(error);\r\n          if (error) {\r\n            reject(error);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Call this to batch the deletion of all keys in the `keys` array.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multiremove\r\n     */\r\n    multiRemove: (keys, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        keys.forEach((key) => checkValidInput(key));\r\n\r\n        RCTAsyncStorage.multiRemove(keys, (errors?: ErrorLike[]) => {\r\n          const error = convertErrors(errors);\r\n          callback?.(error);\r\n          if (error) {\r\n            reject(error);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Batch operation to merge in existing and new values for a given set of\r\n     * keys. This assumes that the values are stringified JSON.\r\n     *\r\n     * **NOTE**: This is not supported by all native implementations.\r\n     *\r\n     * See https://react-native-async-storage.github.io/async-storage/docs/api#multimerge\r\n     */\r\n    multiMerge: (keyValuePairs, callback) => {\r\n      return new Promise((resolve, reject) => {\r\n        RCTAsyncStorage.multiMerge(keyValuePairs, (errors?: ErrorLike[]) => {\r\n          const error = convertErrors(errors);\r\n          callback?.(error);\r\n          if (error) {\r\n            reject(error);\r\n          } else {\r\n            resolve();\r\n          }\r\n        });\r\n      });\r\n    },\r\n  };\r\n})();\r\n\r\n// Not all native implementations support merge.\r\nif (!RCTAsyncStorage.multiMerge) {\r\n  delete AsyncStorage.mergeItem;\r\n  delete AsyncStorage.multiMerge;\r\n}\r\n\r\nexport default AsyncStorage;\r\n"]}